There isn't a single word that describes this well, so I just think of it as a special variable that changes depending on the situation. Those different situations are captured below.

trick is identifying which case the this keyword may be being used in.

__________________________________________
Case 1: In a regular function (or if you're not in a function at all), this points to window. This is the default case.


__________________________________________
Case 2: When a function is called as a method, this points to the object that's on the left side of the dot.

think of it as left of the dot rule

/*
 * You can also think of this as the "left of the dot" rule.
 * For example, in myObject.myMethod(), `this` will be myObject
 * because myObject is to the left of the dot.
 *
 * Of course, if you're using this syntax myObject['myMethod'](),
 * technically it would be the "left of the dot or bracket" rule,
 * but that sounds clumsy and generally terrible.
 *
 * If you have multiple dots, the relevant dot is the one closest
 * to the method call. For example, if you have one.two.hi();
 * `this` inside of hi will be two.
 */

var myObject = {
  myMethod: function() {
    console.log(this);
  }
};

myObject.myMethod(); // myObject

__________________________________________
Case 3: In a function that's being called as a constructor, this points to the object that the constructor is creating.



__________________________________________
Case 4: When you explicitly set the value of this manually using bind, apply, or call, it's all up to you.

You have all the control in this case.

bind is a method on functions, and it returns a copy of the function its called on. where this is set to the first argument passed into bind.

var explicitlySetLogThis.bind({name: 'Gordon'});
